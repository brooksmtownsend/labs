<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NodeJS Labs on Critical Stack Labs</title>
    <link>https://criticalstack.github.io/labs/featurelabs/node/</link>
    <description>Recent content in NodeJS Labs on Critical Stack Labs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Apr 2019 09:43:37 -0400</lastBuildDate>
    
	<atom:link href="https://criticalstack.github.io/labs/featurelabs/node/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deploying a NodeJS App</title>
      <link>https://criticalstack.github.io/labs/featurelabs/node/deploystateless/</link>
      <pubDate>Tue, 23 Apr 2019 09:43:37 -0400</pubDate>
      
      <guid>https://criticalstack.github.io/labs/featurelabs/node/deploystateless/</guid>
      <description>Deploying a Stateless NodeJS App in Critical Stack This lab will walk you through the process of deploying a stateless NodeJS application to Critical Stack.
Getting Started Before we get started, you&amp;rsquo;ll need:
 Node JS (and npm) installed : Node.JS Docker installed : Docker Access to a public container registry (Docker Hub is easiest, Artifactory works too) : Docker Hub  Overview In this lab we will create a simple NodeJS application, deploy it via Critical Stack.</description>
    </item>
    
    <item>
      <title>Updating a NodeJS App</title>
      <link>https://criticalstack.github.io/labs/featurelabs/node/updating/</link>
      <pubDate>Tue, 23 Apr 2019 09:43:37 -0400</pubDate>
      
      <guid>https://criticalstack.github.io/labs/featurelabs/node/updating/</guid>
      <description>Using Critical Stack to update a scalable, stateless application Getting Started Before starting on this lab, you will need to have completed the Previous Node lab.
Overview In the previous lab we created a simple NodeJS application, packaged the application in a docker image, pushed the docker image to a public docker image repository (Docker Hub), pulled that image into a Critical Stack deployment as a container instance, and accessed the application via a public URL.</description>
    </item>
    
  </channel>
</rss>